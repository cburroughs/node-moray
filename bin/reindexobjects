#!/usr/bin/env node
// -*- mode: js -*-
/*
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */

/*
 * Copyright (c) 2014, Joyent, Inc.
 */

var path = require('path');
var url = require('url');

var bunyan = require('bunyan');
var getopt = require('posix-getopt');
var vasync = require('vasync');

var moray = require('../lib');

var prettyPrint = true;


///--- Globals

var LOG = bunyan.createLogger({
    name: path.basename(process.argv[1]),
    level: (process.env.LOG_LEVEL || 'info'),
    stream: process.stderr,
    serializers: bunyan.stdSerializers
});



///--- Functions

function usage(msg) {
    if (msg)
        console.error(msg);

    var str = 'usage: ' + path.basename(process.argv[1]);
    str += '[-v] [-s] [-H] [-h host] [-p port] bucket [count]';
    console.error(str);
    process.exit(1);
}


function parseOptions() {
    var option;
    var opts = {
        host: '127.0.0.1',
        port: 2020
    };
    var parser = new getopt.BasicParser('vsHh:p:', process.argv);

    if (process.env['MORAY_URL']) {
        var u = url.parse(process.env['MORAY_URL']);
        opts.host = u['hostname'] || opts.host;
        opts.port = parseInt(u['port'], 10) || opts.port;
    }

    while ((option = parser.getopt()) !== undefined && !option.error) {
        switch (option.option) {
        case 'h':
            opts.host = option.optarg;
            break;

        case 'p':
            opts.port = parseInt(option.optarg, 10);
            break;

        case 'v':
            // Allows us to set -vvv -> this little hackery
            // just ensures that we're never < TRACE
            LOG.level(Math.max(bunyan.TRACE, (LOG.level() - 10)));
            if (LOG.level() <= bunyan.DEBUG)
                LOG = LOG.child({src: true});
            break;

        default:
            process.exit(1);
            break;
        }
    }

    if (parser.optind() >= process.argv.length)
        usage('missing required arguments: "bucket"');

    var tmp = process.argv.slice(parser.optind());
    opts.bucket = tmp[0];
    opts.count = parseInt(tmp[1], 10) | 100;

    return (opts);
}



///--- Mainline

var client;
var options = parseOptions();

client = moray.createClient({
    host: options.host,
    log: LOG,
    port: options.port
});

client.on('connect', function onConnect() {
    function checkBucket(cb) {
        client.getBucket(options.bucket, function (err, bucket) {
            if (err) {
                cb(err);
                return;
            }
            if (!bucket.reindex_active ||
                Object.keys(bucket.reindex_active).length === 0) {
                // reindexing not require (or already complete)
                client.close();
            }
            cb();
        });
    }
    function reindexLoop(cb) {
        client.reindexObjects(options.bucket, options.count,
            function (err, res) {
            if (err) {
                cb(err);
                return;
            }
            LOG.info(res, 'reindex');
            if (res.processed === 0) {
                cb();
            } else {
                process.nextTick(reindexLoop.bind(null, cb));
            }
        });
    }

    checkBucket(function (err) {
        if (err) {
            console.error(err.message);
            process.exit(1);
        }
        reindexLoop(function (err2) {
            if (err2) {
                console.error(err2.message);
                process.exit(1);
            }
            client.once('close', process.exit.bind(process, 0));
            client.close();
        });
    });
});
