#!/usr/bin/env node
// -*- mode: js -*-
/*
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */

/*
 * Copyright (c) 2014, Joyent, Inc.
 */

var path = require('path');
var url = require('url');

var bunyan = require('bunyan');
var cmdutil = require('cmdutil');
var getopt = require('posix-getopt');

var moray = require('../lib');



///--- Globals

var LOG = bunyan.createLogger({
    name: path.basename(process.argv[1]),
    level: (process.env.LOG_LEVEL || 'fatal'),
    stream: process.stderr,
    serializers: bunyan.stdSerializers
});



///--- Functions

function usage(msg) {
    if (msg)
        console.error(msg);

    var str = 'usage: ' + path.basename(process.argv[1]);
    str += '[-v] [-h host] [-p port] [-i index] [-u index] [-s] name\n';
    str += 'indexes are of the form "name:type"';
    console.error(str);
    process.exit(1);
}


function parseOptions() {
    var option;
    var opts = {
        host: '127.0.0.1',
        port: 2020,
        index: {},
        options: {}
    };
    var parser = new getopt.BasicParser('svti:h:p:u:x:', process.argv);
    var tmp;

    if (process.env['MORAY_URL']) {
        var u = url.parse(process.env['MORAY_URL']);
        opts.host = u['hostname'] || opts.host;
        opts.port = parseInt(u['port'], 10) || opts.port;
    }

    while ((option = parser.getopt()) !== undefined && !option.error) {
        switch (option.option) {
        case 'h':
            opts.host = option.optarg;
            break;

        case 'i':
            tmp = option.optarg.split(':');
            opts.index[tmp[0]] = {
                type: tmp[1] || 'string',
                unique: false
            };
            break;

        case 'n':
            opts.name = option.optarg;
            break;

        case 'p':
            opts.port = parseInt(option.optarg, 10);
            break;

        case 's':
            opts.stdin = true;
            break;

        case 't':
            opts.options.trackModification = true;
            break;

        case 'u':
            tmp = option.optarg.split(':');
            opts.index[tmp[0]] = {
                type: tmp[1] || 'string',
                unique: true
            };
            break;

        case 'v':
            // Allows us to set -vvv -> this little hackery
            // just ensures that we're never < TRACE
            LOG.level(Math.max(bunyan.TRACE, (LOG.level() - 10)));
            if (LOG.level() <= bunyan.DEBUG)
                LOG = LOG.child({src: true});
            break;

        case 'x':
            opts.options.version = parseInt(option.optarg, 10);
            break;

        default:
            process.exit(1);
            break;
        }
    }

    if (parser.optind() >= process.argv.length)
        usage('missing required argument: "name"');
    tmp = process.argv.slice(parser.optind());
    opts.name = tmp[0];

    if (opts.stdin) {
        opts.config = '';
        process.stdin.setEncoding('utf8');
        process.stdin.resume();
        process.stdin.on('data', function (chunk) {
            opts.config += chunk;
        });

        process.stdin.on('end', function () {
            function evalFn(f) {
                var fn;
                fn = eval('fn = ' + f);
                return (fn);
            }
            opts.config = JSON.parse(opts.config);
            opts.config.pre = (opts.config.pre || []).map(evalFn);
            opts.config.post = (opts.config.post || []).map(evalFn);
        });
    }

    return (opts);
}



function putBucket() {
    var client = moray.createClient({
        mustCloseBeforeNormalProcessExit: true,
        failFast: true,
        host: options.host,
        log: LOG,
        port: options.port
    });
    var cfg = options.config || {
        index: options.index,
        options: options.options
    };
    client.on('connect', function onConnect() {
        client.putBucket(options.name, cfg, function callback(err) {
            if (err) {
                console.error(err.message);
                process.exit(1);
            }
            client.close();
        });
    });

    client.on('error', cmdutil.fail);
}



///--- Mainline

var options = parseOptions();
if (options.stdin) {
    process.stdin.on('end', function () {
        process.nextTick(putBucket);
    });
} else {
    putBucket();
}
